
"""
Bob&Alice双签+超过8000后Alice可直接使用私钥花费 + Hash 三脚本测试 - Commit 脚本

创建一个包含 hash script (helloworld) ， Bob&Alice双签script和超过8000个区块后Alice可直接使用私钥花费的三脚本 Taproot 地址

两种花费方式：
1. Script Path 1：任何人提供 preimage "helloworld" 来花费
2. Script Path 2：Bob&Alice双签花费
3. Script Path 3：当超过8000个区块后，Alice可直接使用私钥解锁
4. Key Path：内部私钥直接花费
"""

from bitcoinutils.setup import setup
from bitcoinutils.utils import to_satoshis
from bitcoinutils.script import Script
from bitcoinutils.transactions import Transaction, TxInput, TxOutput
from bitcoinutils.keys import PrivateKey
import hashlib

def main():
    # 设置测试网
    setup('testnet')

    # 内部密钥（内部密钥，Key Path）
    key_private = PrivateKey('')
    key_public = key_private.get_public_key()

    # Alice 的密钥（Script Path 2，双签）
    alice_private = PrivateKey('')
    alice_public = alice_private.get_public_key()
    
    # Bob 的密钥（Script Path 2，双签）
    bob_private = PrivateKey('')
    bob_public = bob_private.get_public_key()
    
    # 创建 preimage 的哈希（Script Path 1）
    preimage = "helloworld"
    preimage_bytes = preimage.encode('utf-8')
    preimage_hash = hashlib.sha256(preimage_bytes).hexdigest()
    
    # Script Path 1: 哈希锁脚本 - 验证 preimage
    hash_script = Script([
        'OP_SHA256',
        preimage_hash,
        'OP_EQUALVERIFY',
        'OP_TRUE'
    ])
    
    # Script Path 2: Bob&Alice 的双签签名脚本 - P2PK
    bob&alice_script = Script([
        OP_2,	
        bob_public.to_x_only_hex(),
        alice_public.to_x_only_hex(),
        OP_3,
        OP_CHECKMULTISIG
    ])
    # Script Path 3: 当超过80000个区块后Alice可直接使用私钥签名来花费
    time_over_alice_script=Script([
        OP_CHECKLOCKTIMEVERIFY,
        OP_DROP,
        alice_public.to_x_only_hex(),
        OP_CHECKSIG
    ])
    
    print("=== Bob&Alice双签 + 时间锁定 + Hash 三脚本 Taproot 地址信息 ===")
    print(f"内部 私钥 (Key Path): {key_private.to_wif()}")
    print(f"内部 公钥 (Internal Key): {key_public.to_hex()}")
    print(f"Alice 私钥 (Script Path 2): {alice_private.to_wif()}")
    print(f"Alice 公钥 (Script Path 2): {alice_public.to_hex()}")
    print(f"Bob 私钥 (Script Path 2): {bob_private.to_wif()}")
    print(f"Bob 公钥 (Script Path 2): {bob_public.to_hex()}")
    #print(f"Bob 公钥 (x-only): {bob_public.to_x_only_hex()}")
    print(f"Preimage (Script Path 1): {preimage}")
    print(f"Preimage Hash: {preimage_hash}")

    
    # 按照验证的双脚本模式创建脚本树：平铺结构
    all_leafs = [[hash_script, bob_alice_script], time_over_alice_script]
    to_address = key_public.get_taproot_address(all_leafs)


    print(f"\nTaproot 地址: {taproot_address.to_string()}")

if __name__ == "__main__":
    main()
